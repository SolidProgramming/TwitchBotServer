@page "/bots"
@using Shares;
@using Shares.Model;
@using Services;
@inject IBotService BotService;

<h3>Meine Bots</h3>
<br />

@if (MyBots == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Bot Name</th>
                <th>Bot Id</th>
                <th>Channel</th>
                <th>Connected?</th>
                <th>Delete?</th>
            </tr>
        </thead>
        @foreach (var bot in MyBots)
        {
            <tr>
                <td><a href="@string.Format("/bots/{0}", bot.Id)">@bot.Settings.TwitchUsername</a></td>
                <td>@bot.Id</td>
                <td>@bot.Settings.Channel</td>
                <td>
                    @switch (bot.Status)
                    {
                        case BotClientStatusModel.Stopped:
                            <button class="btn btn-primary" type="button" @onclick="@(e => StartBot(@bot.Id))">
                                <span role="status" aria-hidden="true">
                                    Start
                                </span>
                            </button>
                            break;
                        case BotClientStatusModel.Started:
                            <button class="btn btn-primary" type="button" @onclick="@(e => StopBot(@bot.Id))">
                                <span role="status" aria-hidden="true">
                                    Stop
                                </span>
                            </button>
                            break;
                        case BotClientStatusModel.AwaitingDisconnect:
                            <button class="btn btn-primary" type="button">
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true">
                                </span>
                                Awaiting Disconnect
                            </button>
                            break;
                        case BotClientStatusModel.AwaitingConnection:
                            <button class="btn btn-primary" type="button">
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true">
                                </span>
                                Awaiting Connection
                            </button>
                            break;
                        default:
                            break;
                    }

                </td>
                <td><input type="button" class="btn btn-secondary" @onclick="@(e => DeleteBot(@bot.Id))" value="Delete" /></td>
            </tr>

        }
    </table>
    <br />
    <div class="container-fluid">
        <a href="/newbot" onclick="Submit"><input type="button" class="btn btn-primary" value="Neuer Bot" /></a>
    </div>
}



@code {
    //TODO: delete bots
    public List<TwitchBotModel> MyBots { get; set; }

    //TODO: needs singleton
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadBots);
    }

    private void LoadBots()
    {
        
        MyBots = BotService.GetBots();

        if (MyBots == null)
        {
            MyBots = new List<TwitchBotModel>();
            return;
        }
    }

    public async Task StartBot(string botId)
    {
        var bot = BotService.GetBot(botId);

        switch (bot.Status)
        {
            case BotClientStatusModel.Stopped:
                await BotService.StartBot(botId);
                break;
            default:
                break;
        }
    }

    public async Task StopBot(string botId)
    {
        var bot = BotService.GetBot(botId);

        switch (bot.Status)
        {
            case BotClientStatusModel.Started:
                await BotService.StopBot(botId);
                break;
            default:
                break;
        }
    }

    public void DeleteBot(string botId)
    {
        BotService.DeleteBot(botId);
    }
}
